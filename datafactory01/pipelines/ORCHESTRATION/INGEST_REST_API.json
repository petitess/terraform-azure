{
    "name": "INGEST_REST_API",
    "properties": {
        "description": "Generic pipeline for rest api calls with json as data format.\n",
        "activities": [
            {
                "name": "If onprem",
                "type": "IfCondition",
                "dependsOn": [
                    {
                        "activity": "LOG_START",
                        "dependencyConditions": [
                            "Succeeded"
                        ]
                    }
                ],
                "userProperties": [],
                "typeProperties": {
                    "expression": {
                        "value": "@pipeline().parameters.payload.is_hybrid",
                        "type": "Expression"
                    },
                    "ifFalseActivities": [
                        {
                            "name": "Copy_REST_JSON_To_DataLake Cloud",
                            "type": "Copy",
                            "dependsOn": [],
                            "policy": {
                                "timeout": "7.00:00:00",
                                "retry": 0,
                                "retryIntervalInSeconds": 30,
                                "secureOutput": false,
                                "secureInput": false
                            },
                            "userProperties": [
                                {
                                    "name": "Destination",
                                    "value": "diaccadlsfsdev/landing/"
                                }
                            ],
                            "typeProperties": {
                                "source": {
                                    "type": "RestSource",
                                    "httpRequestTimeout": "00:01:40",
                                    "requestInterval": "00.00:00:00.010",
                                    "requestMethod": {
                                        "value": "@pipeline().parameters.payload.payload.data_source_rest.request_method",
                                        "type": "Expression"
                                    },
                                    "requestBody": ""
                                },
                                "sink": {
                                    "type": "JsonSink",
                                    "storeSettings": {
                                        "type": "AzureBlobFSWriteSettings"
                                    },
                                    "formatSettings": {
                                        "type": "JsonWriteSettings"
                                    }
                                },
                                "enableStaging": false
                            },
                            "inputs": [
                                {
                                    "referenceName": "RestResourceAnonymous",
                                    "type": "DatasetReference",
                                    "parameters": {
                                        "base_url": {
                                            "value": "@pipeline().parameters.payload.payload.data_source_rest.base_url",
                                            "type": "Expression"
                                        },
                                        "relative_url": {
                                            "value": "@pipeline().parameters.payload.payload.source_entity[0].ingest_rest_api_source_entity.relative_url",
                                            "type": "Expression"
                                        },
                                        "request_method": {
                                            "value": "@pipeline().parameters.payload.payload.data_source_rest.request_method",
                                            "type": "Expression"
                                        }
                                    }
                                }
                            ],
                            "outputs": [
                                {
                                    "referenceName": "JSON",
                                    "type": "DatasetReference",
                                    "parameters": {
                                        "filesystem": {
                                            "value": "@concat('diaccadlsfs', split(pipeline().DataFactory, '-')[3])",
                                            "type": "Expression"
                                        },
                                        "landing_root": {
                                            "value": "/landing",
                                            "type": "Expression"
                                        },
                                        "source_system": {
                                            "value": "@pipeline().parameters.payload.payload.data_source_name",
                                            "type": "Expression"
                                        },
                                        "endpoint": {
                                            "value": "@pipeline().parameters.payload.job_task_name",
                                            "type": "Expression"
                                        },
                                        "file_name": {
                                            "value": "@concat(pipeline().parameters.payload.job_task_name, '_', formatDateTime(utcnow(),'yyyyMMdd'), '.json')",
                                            "type": "Expression"
                                        }
                                    }
                                }
                            ]
                        }
                    ],
                    "ifTrueActivities": [
                        {
                            "name": "Copy_To_DataLake_onprem",
                            "type": "DatabricksNotebook",
                            "dependsOn": [],
                            "policy": {
                                "timeout": "7.00:00:00",
                                "retry": 0,
                                "retryIntervalInSeconds": 30,
                                "secureOutput": false,
                                "secureInput": false
                            },
                            "userProperties": [],
                            "typeProperties": {
                                "notebookPath": "/Repos/customer-notebook/customer-notebook/ingest/ingest_rest_api",
                                "baseParameters": {
                                    "storage_account": {
                                        "value": "@concat('wade', split(pipeline().DataFactory, '-')[1], 'dlst', split(pipeline().DataFactory, '-')[3])",
                                        "type": "Expression"
                                    },
                                    "filesystem": {
                                        "value": "@concat('diaccadlsfs', split(pipeline().DataFactory, '-')[3])",
                                        "type": "Expression"
                                    },
                                    "fs_root": {
                                        "value": "@pipeline().parameters.payload.payload.hdfs_base_url",
                                        "type": "Expression"
                                    },
                                    "landing_root": {
                                        "value": "/landing",
                                        "type": "Expression"
                                    },
                                    "source_system": {
                                        "value": "@pipeline().parameters.payload.payload.data_source_name",
                                        "type": "Expression"
                                    },
                                    "subject_area": {
                                        "value": "dummy",
                                        "type": "Expression"
                                    },
                                    "endpoint": {
                                        "value": "@pipeline().parameters.payload.job_task_name",
                                        "type": "Expression"
                                    },
                                    "base_url": {
                                        "value": "@pipeline().parameters.payload.payload.data_source_rest.base_url",
                                        "type": "Expression"
                                    },
                                    "relative_url": {
                                        "value": "@pipeline().parameters.payload.payload.source_entity[0].ingest_rest_api_source_entity.relative_url",
                                        "type": "Expression"
                                    },
                                    "data_format": {
                                        "value": "@pipeline().parameters.payload.payload.source_entity[0].data_format",
                                        "type": "Expression"
                                    },
                                    "natural_keys": {
                                        "value": "@pipeline().parameters.payload.payload.source_entity[0].natural_keys",
                                        "type": "Expression"
                                    },
                                    "request_method": {
                                        "value": "@pipeline().parameters.payload.payload.data_source_rest.request_method",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "linkedServiceName": {
                                "referenceName": "Databricks",
                                "type": "LinkedServiceReference"
                            }
                        }
                    ]
                }
            },
            {
                "name": "LOG_START",
                "type": "WebActivity",
                "dependsOn": [],
                "policy": {
                    "timeout": "0.12:00:00",
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "typeProperties": {
                    "method": "PUT",
                    "headers": {
                        "Authorization": {
                            "value": "@concat('Bearer ', pipeline().parameters.access_token)",
                            "type": "Expression"
                        }
                    },
                    "url": {
                        "value": "@concat(pipeline().globalParameters.ORCHESTRATION_BASE_URL, '/environments/', pipeline().parameters.payload.environment_id, '/job_execution/', pipeline().parameters.payload.job_execution_id, '/job_task/', pipeline().parameters.payload.job_execution_queue_id,'/start')",
                        "type": "Expression"
                    },
                    "body": {
                        "value": "{}",
                        "type": "Expression"
                    }
                }
            },
            {
                "name": "LOG_END",
                "type": "WebActivity",
                "dependsOn": [
                    {
                        "activity": "If onprem",
                        "dependencyConditions": [
                            "Succeeded"
                        ]
                    }
                ],
                "policy": {
                    "timeout": "0.12:00:00",
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "typeProperties": {
                    "method": "PUT",
                    "headers": {
                        "Authorization": {
                            "value": "@concat('Bearer ', pipeline().parameters.access_token)",
                            "type": "Expression"
                        }
                    },
                    "url": {
                        "value": "@concat(pipeline().globalParameters.ORCHESTRATION_BASE_URL, '/environments/', pipeline().parameters.payload.environment_id, '/job_execution/', pipeline().parameters.payload.job_execution_id, '/job_task/', pipeline().parameters.payload.job_execution_queue_id,'/end')",
                        "type": "Expression"
                    },
                    "body": {
                        "value": "{}",
                        "type": "Expression"
                    }
                }
            },
            {
                "name": "LOG_FAIL",
                "type": "WebActivity",
                "dependsOn": [
                    {
                        "activity": "If onprem",
                        "dependencyConditions": [
                            "Failed"
                        ]
                    }
                ],
                "policy": {
                    "timeout": "0.12:00:00",
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "typeProperties": {
                    "method": "PUT",
                    "headers": {
                        "Authorization": {
                            "value": "@concat('Bearer ', pipeline().parameters.access_token)",
                            "type": "Expression"
                        }
                    },
                    "url": {
                        "value": "@concat(pipeline().globalParameters.ORCHESTRATION_BASE_URL, '/environments/', pipeline().parameters.payload.environment_id, '/job_execution/', pipeline().parameters.payload.job_execution_id, '/job_task/', pipeline().parameters.payload.job_execution_queue_id,'/fail')",
                        "type": "Expression"
                    },
                    "body": {
                        "value": "{}",
                        "type": "Expression"
                    }
                }
            }
        ],
        "parameters": {
            "access_token": {
                "type": "string"
            },
            "payload": {
                "type": "object"
            },
            "from_date": {
                "type": "string"
            },
            "to_date": {
                "type": "string"
            }
        },
        "variables": {
            "endpoint_request": {
                "type": "String"
            },
            "file_name": {
                "type": "String"
            },
            "start_time": {
                "type": "String"
            },
            "api_response": {
                "type": "Array"
            }
        },
        "folder": {
            "name": "ORCHESTRATION/JOB_STEP_EXECUTORS"
        },
        "annotations": [],
        "lastPublishTime": "2023-11-28T15:34:26Z"
    },
    "type": "Microsoft.DataFactory/factories/pipelines"
}